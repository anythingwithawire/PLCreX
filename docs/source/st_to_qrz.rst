ST-to-Quartz Compiler
=====================

.. st_to_qrz:

The ST-to-Quartz Compiler translates imperative sequential ST models to imperative synchronous Quartz models.
The results are intended for reuse in model-based design and formal verification using `Averest <http://www.averest.org>`_ [1,2].

**Usage**

.. code-block:: console

    python -m plcrex st-to-qrz --help


.. code:: console

         Usage: plcrex st-to-qrz [OPTIONS] SOURCE EXPORT

         ST-to-Quartz Compiler                   *.st → *.qrz

        ╭─ Arguments ──────────────────────────────────────────────────────────────────────────────────╮
        │ *    source      PATH  source path [default: None] [required]                                │
        │ *    export      PATH  export path [default: None] [required]                                │
        ╰──────────────────────────────────────────────────────────────────────────────────────────────╯
        ╭─ Options ────────────────────────────────────────────────────────────────────────────────────╮
        │ --help          Show this message and exit.                                                  │
        ╰──────────────────────────────────────────────────────────────────────────────────────────────╯

|

Example: ``REPEAT-UNTIL`` loop
------------------------------------------

The following POU was manually implemented using Beremiz [`.url <https://github.com/beremiz/beremiz>`_].

.. code-block:: console

    FUNCTION_BLOCK TC21
      VAR_OUTPUT
        y : INT;
      END_VAR
      VAR
        x : INT := 1;
        i : INT;
        i0 : INT := 0;
        i1 : INT := 10;
      END_VAR

      i:=i0;
      REPEAT
        y := i;
        i := i+1;
      UNTIL i>i1
      END_REPEAT;
      y := x;
    END_FUNCTION_BLOCK

|


**Command**

.. code-block:: console

    python -m plcrex st-to-qrz "tests/st_to_synchr_models/TC21.st" "exports/TC21.qrz"

**Result**

``TC21.qrz``

.. code-block:: console

    //--- This file was generated by PLCreX ---
    //--- https://github.com/marwern/PLCreX ---
    //-----------------------------------------

     module TC21(int  !y){
     int x;
     int i;
     int i0;
     int i1;
     x=1;
     i0=0;
     i1=10;
     i=i0;
     do{
     y=i;
     next(i)=i+1;
     pause;
    }while(!(i>i1));
     y=x;
    }
