FBD-to-ST Transpiler
=====

.. fbd2st:

The FBD-to-ST Transpiler translates FBDs stored in PLCopen XML format into ST POUs.
The user can additionally run a static code analysis with IEC Checker. Print help of
FBD-to-ST Transpiler with ``COMMAND`` ``fbd2st`` and
``[OPTIONS]`` ``--help`` to see all features and usage:

.. code-block:: console

    (venv) C:\Python\plcrex_project>python -m plcrex fbd2st --help

    Usage: plcrex fbd2st [OPTIONS] SRC

    Arguments:
      SRC  [required]

    Options:
      --iec-check / --no-iec-check    run IEC Checker  [default: False]
      --formal / --no-formal          formal parameter list  [default: False]
      --backward / --no-backward      use backward translation  [default: False]
      --st-parser / --no-st-parser    run ST parser with exports  [default: False]
      --impact-analysis / --no-impact-analysis
                                      chek I/O impact analysis  [default: False]
      --help                          Show this message and exit.

At this point, another comment is probably helpful. In addition to a subsequent static code
code analysis with the IEC Checker or optionally the parsing of the resulting ST POU, PLCreX supports
the translation from FBD to ST in different formats, which are shown in the following picture.
In general we distinguish between a **formal** representation of the parameter list of instantiated POUs,
for example ``TONx(IN := A, PT := B);`` and a **non formal** representation, ``TONx(A,B);``. Furthermore
we distinguish between a **forward** translation strategy and a **backward** translation strategy.
The differences are shown in the examples below.

.. raw:: html

    <img src="https://user-images.githubusercontent.com/92115516/202925984-43aeeba4-16c3-438b-9c7c-e0664175f0d0.png"></img>

.. note::
    It should be noted that in the backward translation strategy the semantics can be changed,
    since the assignment of outputs in this approach is done at the end of a cycle.


.. fbd2st_example1:

Example: TC004.xml
----
The following example was implemented manually using `Beremiz <https://github.com/beremiz/beremiz>`_.

.. raw:: html

    <img src="https://user-images.githubusercontent.com/92115516/198979137-7562d3c1-1729-4a39-99f3-49c4dfb6ae62.PNG"></img>


Command and Result (``--formal``, ``--no-backward``, ``--iec-check``, ``--no-st-parser``, ``--no-impact-analysis``):

.. code-block:: console

    (venv) C:\Python\plcrex_project>python -m plcrex fbd2st --formal --iec-check ".\tests\plcopen_examples\TC004.xml"

    Parsing exports\st\TC004.xml_False_True_True_False.st ...
    Running check for function block TC004
    7:4 UnusedVariable: Found unused local variable: I1
    11:4 UnusedVariable: Found unused local variable: O1
    19:6 UnusedVariable: Found unused local variable: TOF0
    17:6 UnusedVariable: Found unused local variable: TON0
    18:6 UnusedVariable: Found unused local variable: TON1
    7:4 PLCOPEN-CP3: Variable I1 shall be initialized before being used
    19:6 PLCOPEN-CP3: Variable TOF0 shall be initialized before being used
    18:6 PLCOPEN-CP3: Variable TON1 shall be initialized before being used
    17:6 PLCOPEN-CP3: Variable TON0 shall be initialized before being used
    16:4 PLCOPEN-CP3: Variable O4 shall be initialized before being used
    Success!

The following ``st`` file was created: ``./exports/st/txt/TC004.xml.st``

.. code-block:: console

    //--- This file was generated by PLCreX ---
    //--- https://github.com/marwern/PLCreX ---
    //-----------------------------------------

    FUNCTION_BLOCK TC004
            VAR_INPUT
                    i1 : BOOL;
                    i2 : BOOL := FALSE;
            END_VAR
            VAR_OUTPUT
                    o1 : BOOL := FALSE;
            END_VAR
            VAR
                    i3 : TIME := T#5s;
                    i4 : TIME := T#2s;
                    o4 : BOOL;
                    TON0 : TON;
                    TON1 : TON;
                    TOF0 : TOF;
            END_VAR

            TON0(IN := i2,PT := i3);
            TOF0(IN := TON0.Q,PT := i4);
            TON1(IN := TOF0.Q,PT := i3);
            o4 := TON1.Q;
    END_FUNCTION_BLOCK



.. fbd2st_example2:

Example: TC005_PRG.xml
----
The following example was implemented manually using `Beremiz <https://github.com/beremiz/beremiz>`_.

.. raw:: html

    <img src="https://user-images.githubusercontent.com/92115516/198979162-4cc887ca-9754-4223-b2f7-7e3e67fb7143.PNG"></img>

Example: TC005_PRG.xml (formal, backward)
----

Command and Result (``--formal``, ``--backward``, ``--no-iec-check``, ``--no-st-parser``, ``--no-impact-analysis``):

.. code-block:: console

    (venv) C:\Python\plcrex_project>python -m plcrex fbd2st --formal --backward ".\tests\plcopen_examples\TC005_PRG.xml"

    Success!

The following ``st`` file was created: ``./exports/st/txt/TC005_PRG.xml_True_True_False_False.st``

.. code-block:: console

    ...
            VAR
                    i3 : TIME := T#5s;
                    o4 : BOOL;
                    TON0 : TON;
            END_VAR

            TON0(IN := AND(i1,i2),PT := i3);
            o1 := XOR(AND(i1,i2),TON0.Q);
            o4 := TON0.Q;
    END_PROGRAM

Example: TC005_PRG.xml (non formal, backward)
----
Command and Result (``--no-formal``, ``--backward``, ``--no-iec-check``, ``--no-st-parser``, ``--no-impact-analysis``):

.. code-block:: console

    (venv) C:\Python\plcrex_project>python -m plcrex fbd2st --backward ".\tests\plcopen_examples\TC005_PRG.xml"

    Success!

The following ``st`` file was created: ``./exports/st/txt/TC005_PRG.xml_True_False_False_False.st``

.. code-block:: console

    ...
            VAR
                    i3 : TIME := T#5s;
                    o4 : BOOL;
                    TON0 : TON;
            END_VAR

            TON0(AND(i1,i2),i3);
            o1 := XOR(AND(i1,i2),TON0.Q);
            o4 := TON0.Q;
    END_PROGRAM

Example: TC005_PRG.xml (non formal, forward)
----
Command and Result (``--no-formal``, ``--no-backward``, ``--no-iec-check``, ``--no-st-parser``, ``--no-impact-analysis``):

.. code-block:: console

    (venv) C:\Python\plcrex_project>python -m plcrex fbd2st ".\tests\plcopen_examples\TC005_PRG.xml"

    Success!

The following ``st`` file was created: ``./exports/st/txt/TC005_PRG.xml_False_False_False_False.st``

.. code-block:: console

    ...
            VAR
                    i3 : TIME := T#5s;
                    o4 : BOOL;
                    TON0 : TON;
                    AND1_OUT : BOOL;
                    XOR3_OUT : BOOL;
            END_VAR

            AND1_OUT := AND(i1,i2);
            TON0(AND1_OUT,i3);
            XOR3_OUT := XOR(AND1_OUT,TON0.Q);
            o1 := XOR3_OUT;
            o4 := TON0.Q;
    END_PROGRAM

Example: TC005_PRG.xml (formal, forward)
----
Command and Result (``--formal``, ``--no-backward``, ``--no-iec-check``, ``--no-st-parser``, ``--no-impact-analysis``):

.. code-block:: console

    (venv) C:\Python\plcrex_project>python -m plcrex fbd2st --formal ".\tests\plcopen_examples\TC005_PRG.xml"

    Success!

The following ``st`` file was created: ``./exports/st/txt/TC005_PRG.xml_False_True_False_False.st``

.. code-block:: console

    ...
            VAR
                    i3 : TIME := T#5s;
                    o4 : BOOL;
                    TON0 : TON;
                    AND1_OUT : BOOL;
                    XOR3_OUT : BOOL;
            END_VAR

            AND1_OUT := AND(i1,i2);
            TON0(IN := AND1_OUT,PT := i3);
            XOR3_OUT := XOR(AND1_OUT,TON0.Q);
            o1 := XOR3_OUT;
            o4 := TON0.Q;
    END_PROGRAM

Example: TC006_FBD.xml (non formal, forward, impact analysis)
----
The following example was implemented manually using `Beremiz <https://github.com/beremiz/beremiz>`_.

.. raw:: html

    <img src="https://user-images.githubusercontent.com/92115516/202922634-66930915-c5d1-495a-b9a5-8bac36fe6263.PNG"></img>


The concept is illustrated in the figure below.

.. raw:: html

    <img src="https://user-images.githubusercontent.com/92115516/202925979-b8132c95-1ac9-494d-8598-5079a2ff2798.png"></img>

Command and Result (``--formal``, ``--no-backward``, ``--no-iec-check``, ``--no-st-parser``, ``--impact-analysis``):

.. code-block:: console

    (venv) C:\Python\plcrex_project>python -m plcrex fbd2st --no-formal --impact-analysis ".\tests\plcopen_examples\TC006_FBD.xml"

    Success!

The following ``dot`` file was created: ``./exports/tree/dot/TC006_FBD.xml_True_False_False_False_True.st.dot``

.. raw:: html

    <img src="https://user-images.githubusercontent.com/92115516/202922310-3bba478a-bcfb-47cb-950b-e69c8f2f3785.svg"></img>


.. note::
    Without database additional local variables needed for forward translation are declared as ``BOOL`` by default,
    unless the data type is implicit given by connected component. ST Parser is only compatible with
    non formal translation.